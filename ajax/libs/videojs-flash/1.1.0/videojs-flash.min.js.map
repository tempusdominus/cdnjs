{"version":3,"sources":["node_modules/videojs-spellbook/node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/global/window.js","node_modules/videojs-swf/package.json","src/js/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","videojsFlash","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","win","name","description","version","copyright","keywords","homepage","author","repository","type","url","devDependencies","async","chg","flex-sdk","grunt","grunt-bumpup","grunt-cli","grunt-connect","grunt-contrib-jshint","grunt-contrib-qunit","grunt-contrib-watch","grunt-npm","grunt-prompt","grunt-shell","grunt-tagrelease","qunitjs","video.js","scripts","readme","readmeFilename","gitHead","bugs","_id","_shasum","_from","_createGetter","attr","_api","el_","vjs_getProperty","videojs","ex","_typeof","Tech","getComponent","Dom","dom","Url","createTimeRange","mergeOptions","navigator","Flash","_Tech","options","ready","_classCallCheck","_this","_possibleConstructorReturn","source","setSource","startTime","load","play","currentTime","onReady","onEvent","onError","on","lastSeekTarget_","undefined","createEl","options_","swf","ver","objId","techId","flashVars","readyFunction","eventProxyFunction","errorEventProxyFunction","autoplay","preload","loop","muted","params","wmode","bgcolor","attributes","id","class","embed","tech","ended","setCurrentTime","vjs_play","pause","vjs_pause","src","_src","currentSrc","setSrc","_this2","getAbsoluteURL","vjs_src","setTimeout","seeking","time","seekable","start","end","trigger","vjs_setProperty","prototype","currentSource_","duration","readyState","NaN","Infinity","vjs_load","poster","setPoster","buffered","ranges","supportsFullScreen","enterFullScreen","getVideoPlaybackQuality","videoPlaybackQuality","performance","now","creationTime","timing","navigationStart","Date","_readWrite","_readOnly","attrUpper","charAt","toUpperCase","slice","val","_i","isSupported","withSourceHandlers","nativeSourceHandler","canPlayType","formats","canHandleSource","replace","toLowerCase","ext","getFileExtension","handleSource","dispose","registerSourceHandler","video/flv","video/x-flv","video/mp4","video/m4v","currSwf","el","$","checkReady","triggerReady","swfID","eventName","args","Array","arguments","err","error","ActiveXObject","GetVariable","match","mimeTypes","enabledPlugin","plugins","split","getEmbedCode","innerHTML","childNodes","flashVarsString","paramsString","attrsString","Object","getOwnPropertyNames","forEach","key","movie","flashvars","allowScriptAccess","allowNetworking","data","width","height","streamingFormats","rtmp/mp4","rtmp/flv","streamFromParts","connection","stream","streamToParts","parts","connEnd","search","streamBegin","lastIndexOf","substring","isStreamingType","srcType","RTMP_RE","isStreamingSrc","test","rtmpSourceHandler","can","srcParts","setRtmpConnection","setRtmpStream","getTech","log","warn","registerTech"],"mappings":"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","file":"/Users/gkatsevman/p/videojs-flash/dist/videojs-flash.min.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","module.exports={\n  \"name\": \"videojs-swf\",\n  \"description\": \"The Flash-fallback video player for video.js (http://videojs.com)\",\n  \"version\": \"5.4.0\",\n  \"copyright\": \"Copyright 2014 Brightcove, Inc. https://github.com/videojs/video-js-swf/blob/master/LICENSE\",\n  \"keywords\": [\n    \"flash\",\n    \"video\",\n    \"player\"\n  ],\n  \"homepage\": \"http://videojs.com\",\n  \"author\": {\n    \"name\": \"Brightcove\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/videojs/video-js-swf.git\"\n  },\n  \"devDependencies\": {\n    \"async\": \"~0.2.9\",\n    \"chg\": \"^0.3.2\",\n    \"flex-sdk\": \"4.6.0-0\",\n    \"grunt\": \"~0.4.0\",\n    \"grunt-bumpup\": \"~0.5.0\",\n    \"grunt-cli\": \"~0.1.0\",\n    \"grunt-connect\": \"~0.2.0\",\n    \"grunt-contrib-jshint\": \"~0.4.3\",\n    \"grunt-contrib-qunit\": \"~0.2.1\",\n    \"grunt-contrib-watch\": \"~0.1.4\",\n    \"grunt-npm\": \"~0.0.2\",\n    \"grunt-prompt\": \"~0.1.2\",\n    \"grunt-shell\": \"~0.6.1\",\n    \"grunt-tagrelease\": \"~0.3.1\",\n    \"qunitjs\": \"~1.12.0\",\n    \"video.js\": \"^5.9.2\"\n  },\n  \"scripts\": {\n    \"version\": \"chg release -y && grunt dist && git add -f dist/ && git add CHANGELOG.md\"\n  },\n  \"readme\": \"The light-weight Flash video player that makes Flash work like HTML5 video. This allows player skins, plugins, and other features to work with both HTML5 and Flash\\n\\nThis project doesn't need to be used if you simply want to use the Flash video player.  Head back to the main Video.js project if that's all you need, as the compiled SWF is checked in there.\\n\\n## Installation\\n\\n1. Install Node Packages.\\n```bash\\n    npm install\\n   ```\\n2. Compile SWF.\\nDevelopment (places new SWF in /dist/):\\n```bash\\n    grunt mxmlc\\n   ```\\nProduction/ Distribution (runs mxmlc task and copies SWF to dist/):\\n```bash\\n    grunt dist\\n   ```\\n3. Run Connect Server.\\n```bash\\n    grunt connect:dev\\n```\\n4. Open your browser at [http://localhost:8000/index.html](http://localhost:8000/index.html) to see a video play.  You can keep using grunt to rebuild the Flash code.\\n\\n## Releasing\\n\\n1. Make sure that the following file is modified with these values:\\n\\n```\\nnode_modules/flex-sdk/lib/flex_sdk/frameworks/flex-config.xml\\n```\\n\\n```xml\\n<!-- Specifies the minimum player version that will run the compiled SWF. -->\\n<target-player>10.3</target-player>\\n\\n<!-- Specifies the version of the compiled SWF -->\\n<swf-version>12</swf-version>\\n```\\n\\n2. Run the commands:\\n```sh\\nnpm version {major,minor,patch}\\nnpm publish\\n```\\nThe swf and changelog will be automatically built and added to the repo on version.\\n\\n## Running Unit and Integration Tests\\n\\n** Note - We want to drop all of this for grunt based / Karma testing.\\n\\nFor unit tests, this project uses [FlexUnit](http://flexunit.org/). The unit tests can be found in [project root]/src/com/videojs/test/\\n\\nFor integration tests, this project uses [qunit](http://qunitjs.com/). The integration tests can be found in [project root]/test\\n\\nIn order to run all of the tests, use the links at  [http://localhost:8000/index.html](http://localhost:8000/index.html)\\n\\nThere are very few tests.  Adding to them is a fantastic and much appreciated way to contribute.\\n\",\n  \"readmeFilename\": \"README.md\",\n  \"gitHead\": \"84e862116d82b4046b985e956ad1eb1fe2f3d4a8\",\n  \"bugs\": {\n    \"url\": \"https://github.com/videojs/video-js-swf/issues\"\n  },\n  \"_id\": \"videojs-swf@5.4.0\",\n  \"_shasum\": \"dfe3d72026acdb83205eca43aab03373a0b80bb2\",\n  \"_from\": \"videojs-swf@>=5.4.0 <6.0.0\"\n}\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar videojs = _interopDefault(require('video.js'));\nvar global = require('global');\n\n/**\n * @file flash-rtmp.js\n * @module flash-rtmp\n */\n\n/**\n * Add RTMP properties to the {@link Flash} Tech.\n *\n * @param {Flash} Flash\n *        The flash tech class.\n *\n * @mixin FlashRtmpDecorator\n *\n * @return {Flash}\n *         The flash tech with RTMP properties added.\n */\nfunction FlashRtmpDecorator(Flash) {\n  Flash.streamingFormats = {\n    'rtmp/mp4': 'MP4',\n    'rtmp/flv': 'FLV'\n  };\n\n  /**\n   * Join connection and stream with an ampersand.\n   *\n   * @param {string} connection\n   *        The connection string.\n   *\n   * @param {string} stream\n   *        The stream string.\n   *\n   * @return {string}\n   *         The connection and stream joined with an `&` character\n   */\n  Flash.streamFromParts = function(connection, stream) {\n    return connection + '&' + stream;\n  };\n\n  /**\n   * The flash parts object that contains connection and stream info.\n   *\n   * @typedef {Object} Flash~PartsObject\n   *\n   * @property {string} connection\n   *           The connection string of a source, defaults to an empty string.\n   *\n   * @property {string} stream\n   *           The stream string of the source, defaults to an empty string.\n   */\n\n  /**\n   * Convert a source url into a stream and connection parts.\n   *\n   * @param {string} src\n   *        the source url\n   *\n   * @return {Flash~PartsObject}\n   *         The parts object that contains a connection and a stream\n   */\n  Flash.streamToParts = function(src) {\n    const parts = {\n      connection: '',\n      stream: ''\n    };\n\n    if (!src) {\n      return parts;\n    }\n\n    // Look for the normal URL separator we expect, '&'.\n    // If found, we split the URL into two pieces around the\n    // first '&'.\n    let connEnd = src.search(/&(?!\\w+=)/);\n    let streamBegin;\n\n    if (connEnd !== -1) {\n      streamBegin = connEnd + 1;\n    } else {\n      // If there's not a '&', we use the last '/' as the delimiter.\n      connEnd = streamBegin = src.lastIndexOf('/') + 1;\n      if (connEnd === 0) {\n        // really, there's not a '/'?\n        connEnd = streamBegin = src.length;\n      }\n    }\n\n    parts.connection = src.substring(0, connEnd);\n    parts.stream = src.substring(streamBegin, src.length);\n\n    return parts;\n  };\n\n  /**\n   * Check if the source type is a streaming type.\n   *\n   * @param {string} srcType\n   *        The mime type to check.\n   *\n   * @return {boolean}\n   *          - True if the source type is a streaming type.\n   *          - False if the source type is not a streaming type.\n   */\n  Flash.isStreamingType = function(srcType) {\n    return srcType in Flash.streamingFormats;\n  };\n\n  // RTMP has four variations, any string starting\n  // with one of these protocols should be valid\n\n  /**\n   * Regular expression used to check if the source is an rtmp source.\n   *\n   * @property {RegExp} Flash.RTMP_RE\n   */\n  Flash.RTMP_RE = /^rtmp[set]?:\\/\\//i;\n\n  /**\n   * Check if the source itself is a streaming type.\n   *\n   * @param {string} src\n   *        The url to the source.\n   *\n   * @return {boolean}\n   *          - True if the source url indicates that the source is streaming.\n   *          - False if the shource url indicates that the source url is not streaming.\n   */\n  Flash.isStreamingSrc = function(src) {\n    return Flash.RTMP_RE.test(src);\n  };\n\n  /**\n   * A source handler for RTMP urls\n   * @type {Object}\n   */\n  Flash.rtmpSourceHandler = {};\n\n  /**\n   * Check if Flash can play the given mime type.\n   *\n   * @param {string} type\n   *        The mime type to check\n   *\n   * @return {string}\n   *         'maybe', or '' (empty string)\n   */\n  Flash.rtmpSourceHandler.canPlayType = function(type) {\n    if (Flash.isStreamingType(type)) {\n      return 'maybe';\n    }\n\n    return '';\n  };\n\n  /**\n   * Check if Flash can handle the source natively\n   *\n   * @param {Object} source\n   *        The source object\n   *\n   * @param {Object} [options]\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'maybe', or '' (empty string)\n   */\n  Flash.rtmpSourceHandler.canHandleSource = function(source, options) {\n    const can = Flash.rtmpSourceHandler.canPlayType(source.type);\n\n    if (can) {\n      return can;\n    }\n\n    if (Flash.isStreamingSrc(source.src)) {\n      return 'maybe';\n    }\n\n    return '';\n  };\n\n  /**\n   * Pass the source to the flash object.\n   *\n   * @param {Object} source\n   *        The source object\n   *\n   * @param {Flash} tech\n   *        The instance of the Flash tech\n   *\n   * @param {Object} [options]\n   *        The options to pass to the source\n   */\n  Flash.rtmpSourceHandler.handleSource = function(source, tech, options) {\n    const srcParts = Flash.streamToParts(source.src);\n\n    tech.setRtmpConnection(srcParts.connection);\n    tech.setRtmpStream(srcParts.stream);\n  };\n\n  // Register the native source handler\n  Flash.registerSourceHandler(Flash.rtmpSourceHandler);\n\n  return Flash;\n}\n\n/**\n * @file flash.js\n * VideoJS-SWF - Custom Flash Player with HTML5-ish API\n * https://github.com/zencoder/video-js-swf\n * Not using setupTriggers. Using global onEvent func to distribute events\n */\n\nconst Tech = videojs.getComponent('Tech');\nconst Dom = videojs.dom;\nconst Url = videojs.url;\nconst createTimeRange = videojs.createTimeRange;\nconst mergeOptions = videojs.mergeOptions;\n\nconst navigator = global.window && global.window.navigator || {};\n\n/**\n * Flash Media Controller - Wrapper for Flash Media API\n *\n * @mixes FlashRtmpDecorator\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\nclass Flash extends Tech {\n\n /**\n  * Create an instance of this Tech.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  *\n  * @param {Component~ReadyCallback} ready\n  *        Callback function to call when the `Flash` Tech is ready.\n  */\n  constructor(options, ready) {\n    super(options, ready);\n\n    // Set the source when ready\n    if (options.source) {\n      this.ready(function() {\n        this.setSource(options.source);\n      }, true);\n    }\n\n    // Having issues with Flash reloading on certain page actions\n    // (hide/resize/fullscreen) in certain browsers\n    // This allows resetting the playhead when we catch the reload\n    if (options.startTime) {\n      this.ready(function() {\n        this.load();\n        this.play();\n        this.currentTime(options.startTime);\n      }, true);\n    }\n\n    // Add global window functions that the swf expects\n    // A 4.x workflow we weren't able to solve for in 5.0\n    // because of the need to hard code these functions\n    // into the swf for security reasons\n    global.window.videojs = global.window.videojs || {};\n    global.window.videojs.Flash = global.window.videojs.Flash || {};\n    global.window.videojs.Flash.onReady = Flash.onReady;\n    global.window.videojs.Flash.onEvent = Flash.onEvent;\n    global.window.videojs.Flash.onError = Flash.onError;\n\n    this.on('seeked', function() {\n      this.lastSeekTarget_ = undefined;\n    });\n\n  }\n\n  /**\n   * Create the `Flash` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl() {\n    const options = this.options_;\n\n    // If video.js is hosted locally you should also set the location\n    // for the hosted swf, which should be relative to the page (not video.js)\n    // Otherwise this adds a CDN url.\n    // The CDN also auto-adds a swf URL for that specific version.\n    if (!options.swf) {\n      const ver = require('videojs-swf/package.json').version;\n\n      options.swf = `//vjs.zencdn.net/swf/${ver}/video-js.swf`;\n    }\n\n    // Generate ID for swf object\n    const objId = options.techId;\n\n    // Merge default flashvars with ones passed in to init\n    const flashVars = mergeOptions({\n\n      // SWF Callback Functions\n      readyFunction: 'videojs.Flash.onReady',\n      eventProxyFunction: 'videojs.Flash.onEvent',\n      errorEventProxyFunction: 'videojs.Flash.onError',\n\n      // Player Settings\n      autoplay: options.autoplay,\n      preload: options.preload,\n      loop: options.loop,\n      muted: options.muted\n\n    }, options.flashVars);\n\n    // Merge default parames with ones passed in\n    const params = mergeOptions({\n      // Opaque is needed to overlay controls, but can affect playback performance\n      wmode: 'opaque',\n      // Using bgcolor prevents a white flash when the object is loading\n      bgcolor: '#000000'\n    }, options.params);\n\n    // Merge default attributes with ones passed in\n    const attributes = mergeOptions({\n      // Both ID and Name needed or swf to identify itself\n      id: objId,\n      name: objId,\n      class: 'vjs-tech'\n    }, options.attributes);\n\n    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);\n    this.el_.tech = this;\n\n    return this.el_;\n  }\n\n  /**\n   * Called by {@link Player#play} to play using the `Flash` `Tech`.\n   */\n  play() {\n    if (this.ended()) {\n      this.setCurrentTime(0);\n    }\n    this.el_.vjs_play();\n  }\n\n  /**\n   * Called by {@link Player#pause} to pause using the `Flash` `Tech`.\n   */\n  pause() {\n    this.el_.vjs_pause();\n  }\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   * > Note: Please use {@link Flash#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n  src(src) {\n    if (src === undefined) {\n      return this.currentSrc();\n    }\n\n    // Setting src through `src` not `setSrc` will be deprecated\n    return this.setSrc(src);\n  }\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   */\n  setSrc(src) {\n    // Make sure source URL is absolute.\n    src = Url.getAbsoluteURL(src);\n    this.el_.vjs_src(src);\n\n    // Currently the SWF doesn't autoplay if you load a source later.\n    // e.g. Load player w/ no source, wait 2s, set src.\n    if (this.autoplay()) {\n      this.setTimeout(() => this.play(), 0);\n    }\n  }\n\n  /**\n   * Indicates whether the media is currently seeking to a new position or not.\n   *\n   * @return {boolean}\n   *         - True if seeking to a new position\n   *         - False otherwise\n   */\n  seeking() {\n    return this.lastSeekTarget_ !== undefined;\n  }\n\n  /**\n   * Returns the current time in seconds that the media is at in playback.\n   *\n   * @param {number} time\n   *        Current playtime of the media in seconds.\n   */\n  setCurrentTime(time) {\n    const seekable = this.seekable();\n\n    if (seekable.length) {\n      // clamp to the current seekable range\n      time = time > seekable.start(0) ? time : seekable.start(0);\n      time = time < seekable.end(seekable.length - 1) ?\n        time : seekable.end(seekable.length - 1);\n\n      this.lastSeekTarget_ = time;\n      this.trigger('seeking');\n      this.el_.vjs_setProperty('currentTime', time);\n      super.setCurrentTime();\n    }\n  }\n\n  /**\n   * Get the current playback time in seconds\n   *\n   * @return {number}\n   *         The current time of playback in seconds.\n   */\n  currentTime() {\n    // when seeking make the reported time keep up with the requested time\n    // by reading the time we're seeking to\n    if (this.seeking()) {\n      return this.lastSeekTarget_ || 0;\n    }\n    return this.el_.vjs_getProperty('currentTime');\n  }\n\n  /**\n   * Get the current source\n   *\n   * @method currentSrc\n   * @return {Tech~SourceObject}\n   *         The current source\n   */\n  currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.vjs_getProperty('currentSrc');\n  }\n\n  /**\n   * Get the total duration of the current media.\n   *\n   * @return {number}\n   8          The total duration of the current media.\n   */\n  duration() {\n    if (this.readyState() === 0) {\n      return NaN;\n    }\n    const duration = this.el_.vjs_getProperty('duration');\n\n    return duration >= 0 ? duration : Infinity;\n  }\n\n  /**\n   * Load media into Tech.\n   */\n  load() {\n    this.el_.vjs_load();\n  }\n\n  /**\n   * Get the poster image that was set on the tech.\n   */\n  poster() {\n    this.el_.vjs_getProperty('poster');\n  }\n\n  /**\n   * Poster images are not handled by the Flash tech so make this is a no-op.\n   */\n  setPoster() {}\n\n  /**\n   * Determine the time ranges that can be seeked to in the media.\n   *\n   * @return {TimeRange}\n   *         Returns the time ranges that can be seeked to.\n   */\n  seekable() {\n    const duration = this.duration();\n\n    if (duration === 0) {\n      return createTimeRange();\n    }\n    return createTimeRange(0, duration);\n  }\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n  buffered() {\n    const ranges = this.el_.vjs_getProperty('buffered');\n\n    if (ranges.length === 0) {\n      return createTimeRange();\n    }\n    return createTimeRange(ranges[0][0], ranges[0][1]);\n  }\n\n  /**\n   * Get fullscreen support -\n   *\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n  supportsFullScreen() {\n    // Flash does not allow fullscreen through javascript\n    return false;\n  }\n\n  /**\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n  enterFullScreen() {\n    return false;\n  }\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n  getVideoPlaybackQuality() {\n    const videoPlaybackQuality = this.el_.vjs_getProperty('getVideoPlaybackQuality');\n\n    if (global.window.performance && typeof global.window.performance.now === 'function') {\n      videoPlaybackQuality.creationTime = global.window.performance.now();\n    } else if (global.window.performance &&\n               global.window.performance.timing &&\n               typeof global.window.performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime =\n        global.window.Date.now() - global.window.performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  }\n}\n\n// Create setters and getters for attributes\nconst _readWrite = [\n  'rtmpConnection',\n  'rtmpStream',\n  'preload',\n  'defaultPlaybackRate',\n  'playbackRate',\n  'autoplay',\n  'loop',\n  'controls',\n  'volume',\n  'muted',\n  'defaultMuted'\n];\nconst _readOnly = [\n  'networkState',\n  'readyState',\n  'initialTime',\n  'startOffsetTime',\n  'paused',\n  'ended',\n  'videoWidth',\n  'videoHeight'\n];\nconst _api = Flash.prototype;\n\n/**\n * Create setters for the swf on the element\n *\n * @param {string} attr\n *        The name of the parameter\n *\n * @private\n */\nfunction _createSetter(attr) {\n  const attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);\n\n  _api['set' + attrUpper] = function(val) {\n    return this.el_.vjs_setProperty(attr, val);\n  };\n}\n\n/**\n * Create petters for the swf on the element\n *\n * @param {string} attr\n *        The name of the parameter\n *\n * @private\n */\nfunction _createGetter(attr) {\n  _api[attr] = function() {\n    return this.el_.vjs_getProperty(attr);\n  };\n}\n\n// Create getter and setters for all read/write attributes\nfor (let i = 0; i < _readWrite.length; i++) {\n  _createGetter(_readWrite[i]);\n  _createSetter(_readWrite[i]);\n}\n\n// Create getters for read-only attributes\nfor (let i = 0; i < _readOnly.length; i++) {\n  _createGetter(_readOnly[i]);\n}\n\n/** ------------------------------ Getters ------------------------------ **/\n/**\n * Get the value of `rtmpConnection` from the swf.\n *\n * @method Flash#rtmpConnection\n * @return {string}\n *         The current value of `rtmpConnection` on the swf.\n */\n\n/**\n * Get the value of `rtmpStream` from the swf.\n *\n * @method Flash#rtmpStream\n * @return {string}\n *         The current value of `rtmpStream` on the swf.\n */\n\n/**\n * Get the value of `preload` from the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#preload\n * @return {string}\n *         The value of `preload` from the swf. Will be 'none', 'metadata',\n *         or 'auto'.\n */\n\n/**\n * Get the value of `defaultPlaybackRate` from the swf.\n *\n * @method Flash#defaultPlaybackRate\n * @return {number}\n *         The current value of `defaultPlaybackRate` on the swf.\n */\n\n/**\n * Get the value of `playbackRate` from the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the swf. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Get the value of `autoplay` from the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the swf.\n *         - True indicates that the media ashould start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Get the value of `loop` from the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#loop\n * @return {boolean}\n *         - The value of `loop` from the swf.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n */\n\n/**\n * Get the value of `mediaGroup` from the swf.\n *\n * @method Flash#mediaGroup\n * @return {string}\n *         The current value of `mediaGroup` on the swf.\n */\n\n/**\n * Get the value of `controller` from the swf.\n *\n * @method Flash#controller\n * @return {string}\n *         The current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Get the value of the `volume` from the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#volume\n * @return {number}\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Get the value of the `muted` from the swf. `muted` indicates the current\n * audio level should be silent.\n *\n * @method Flash#muted\n * @return {boolean}\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Get the value of `defaultMuted` from the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the swf.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/**\n * Get the value of `networkState` from the swf. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Flash#networkState\n * @return {number}\n *         The value of `networkState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `initialTime` from the swf.\n *\n * @method Flash#initialTime\n * @return {number}\n *         The `initialTime` proprety on the swf.\n */\n\n/**\n * Get the value of `startOffsetTime` from the swf.\n *\n * @method Flash#startOffsetTime\n * @return {number}\n *         The `startOffsetTime` proprety on the swf.\n */\n\n/**\n * Get the value of `paused` from the swf. `paused` indicates whether the swf\n * is current paused or not.\n *\n * @method Flash#paused\n * @return {boolean}\n *         The value of `paused` from the swf.\n */\n\n/**\n * Get the value of `ended` from the swf. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Flash#ended\n * @return {boolean}\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n\n/**\n * Get the value of `videoWidth` from the swf. `videoWidth` indicates\n * the current width of the media in css pixels.\n *\n * @method Flash#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the swf. This will be a number\n *         in css pixels.\n */\n\n/**\n * Get the value of `videoHeight` from the swf. `videoHeigth` indicates\n * the current height of the media in css pixels.\n *\n * @method Flassh.prototype.videoHeight\n * @return {number}\n *         The value of `videoHeight` from the swf. This will be a number\n *         in css pixels.\n */\n/** ------------------------------ Setters ------------------------------ **/\n\n/**\n * Set the value of `rtmpConnection` on the swf.\n *\n * @method Flash#setRtmpConnection\n * @param {string} rtmpConnection\n *        New value to set the `rtmpConnection` property to.\n */\n\n/**\n * Set the value of `rtmpStream` on the swf.\n *\n * @method Flash#setRtmpStream\n * @param {string} rtmpStream\n *        New value to set the `rtmpStream` property to.\n */\n\n/**\n * Set the value of `preload` on the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#setPreload\n * @param {string} preload\n *        The value of `preload` to set on the swf. Should be 'none', 'metadata',\n *        or 'auto'.\n */\n\n/**\n * Set the value of `defaultPlaybackRate` on the swf.\n *\n * @method Flash#setDefaultPlaybackRate\n * @param {number} defaultPlaybackRate\n *        New value to set the `defaultPlaybackRate` property to.\n */\n\n/**\n * Set the value of `playbackRate` on the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#setPlaybackRate\n * @param {number} playbackRate\n *        New value of `playbackRate` on the swf. A number indicating\n *        the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Set the value of `autoplay` on the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#setAutoplay\n * @param {boolean} autoplay\n *        - The value of `autoplay` from the swf.\n *        - True indicates that the media ashould start as soon as the page loads.\n *        - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Set the value of `loop` on the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#setLoop\n * @param {boolean} loop\n *        - True indicates that playback should seek back to start once\n *          the end of a media is reached.\n *        - False indicates that playback should not loop back to the start when the\n *          end of the media is reached.\n */\n\n/**\n * Set the value of `mediaGroup` on the swf.\n *\n * @method Flash#setMediaGroup\n * @param {string} mediaGroup\n *        New value of `mediaGroup` to set on the swf.\n */\n\n/**\n * Set the value of `controller` on the swf.\n *\n * @method Flash#setController\n * @param {string} controller\n *        New value the current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Set the value of the `volume` on the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#setVolume\n * @param {number} percentAsDecimal\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Set the value of the `muted` on the swf. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Flash#setMuted\n * @param {boolean} muted\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Set the value of `defaultMuted` on the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#setDefaultMuted\n * @param {boolean} defaultMuted\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/* Flash Support Testing -------------------------------------------------------- */\n\n/**\n * Check if the Flash tech is currently supported.\n *\n * @return {boolean}\n *          - True if the flash tech is supported.\n *          - False otherwise.\n */\nFlash.isSupported = function() {\n  return Flash.version()[0] >= 10;\n  // return swfobject.hasFlashPlayerVersion('10');\n};\n\n// Add Source Handler pattern functions to this tech\nTech.withSourceHandlers(Flash);\n\n/*\n * Native source handler for flash,  simply passes the source to the swf element.\n *\n * @property {Tech~SourceObject} source\n *           The source object\n *\n * @property {Flash} tech\n *           The instance of the Flash tech\n */\nFlash.nativeSourceHandler = {};\n\n/**\n * Check if the Flash can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'maybe', or '' (empty string)\n */\nFlash.nativeSourceHandler.canPlayType = function(type) {\n  if (type in Flash.formats) {\n    return 'maybe';\n  }\n\n  return '';\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'maybe', or '' (empty string).\n */\nFlash.nativeSourceHandler.canHandleSource = function(source, options) {\n  let type;\n\n  /**\n   * Guess the mime type of a file if it does not have one\n   *\n   * @param {Tech~SourceObject} src\n   *        The source object to guess the mime type for\n   *\n   * @return {string}\n   *         The mime type that was guessed\n   */\n  function guessMimeType(src) {\n    const ext = Url.getFileExtension(src);\n\n    if (ext) {\n      return `video/${ext}`;\n    }\n    return '';\n  }\n\n  if (!source.type) {\n    type = guessMimeType(source.src);\n  } else {\n    // Strip code information from the type because we don't get that specific\n    type = source.type.replace(/;.*/, '').toLowerCase();\n  }\n\n  return Flash.nativeSourceHandler.canPlayType(type);\n};\n\n/**\n * Pass the source to the swf.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Flash} tech\n *        The instance of the Flash tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nFlash.nativeSourceHandler.handleSource = function(source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * noop for native source handler dispose, as cleanup will happen automatically.\n */\nFlash.nativeSourceHandler.dispose = function() {};\n\n// Register the native source handler\nFlash.registerSourceHandler(Flash.nativeSourceHandler);\n\n/**\n * Flash supported mime types.\n *\n * @constant {Object}\n */\nFlash.formats = {\n  'video/flv': 'FLV',\n  'video/x-flv': 'FLV',\n  'video/mp4': 'MP4',\n  'video/m4v': 'MP4'\n};\n\n/**\n * Called when the the swf is \"ready\", and makes sure that the swf is really\n * ready using {@link Flash#checkReady}\n *\n * @param {Object} currSwf\n *        The current swf object\n */\nFlash.onReady = function(currSwf) {\n  const el = Dom.$('#' + currSwf);\n  const tech = el && el.tech;\n\n  // if there is no el then the tech has been disposed\n  // and the tech element was removed from the player div\n  if (tech && tech.el()) {\n    // check that the flash object is really ready\n    Flash.checkReady(tech);\n  }\n};\n\n/**\n * The SWF isn't always ready when it says it is. Sometimes the API functions still\n * need to be added to the object. If it's not ready, we set a timeout to check again\n * shortly.\n *\n * @param {Flash} tech\n *        The instance of the flash tech to check.\n */\nFlash.checkReady = function(tech) {\n  // stop worrying if the tech has been disposed\n  if (!tech.el()) {\n    return;\n  }\n\n  // check if API property exists\n  if (tech.el().vjs_getProperty) {\n    // tell tech it's ready\n    tech.triggerReady();\n  } else {\n    // wait longer\n    this.setTimeout(function() {\n      Flash.checkReady(tech);\n    }, 50);\n  }\n};\n\n/**\n * Trigger events from the swf on the Flash Tech.\n *\n * @param {number} swfID\n *        The id of the swf that had the event\n *\n * @param {string} eventName\n *        The name of the event to trigger\n */\nFlash.onEvent = function(swfID, eventName) {\n  const tech = Dom.$('#' + swfID).tech;\n  const args = Array.prototype.slice.call(arguments, 2);\n\n  // dispatch Flash events asynchronously for two reasons:\n  // - Flash swallows any exceptions generated by javascript it\n  //   invokes\n  // - Flash is suspended until the javascript returns which may cause\n  //   playback performance issues\n  tech.setTimeout(function() {\n    tech.trigger(eventName, args);\n  }, 1);\n};\n\n/**\n * Log errors from the swf on the Flash tech.\n *\n * @param {number} swfID\n *        The id of the swf that had an error.\n *\n * @param {string} err\n *        The error to set on the Flash Tech.\n *\n * @return {MediaError|undefined}\n *          - Returns a MediaError when err is 'srcnotfound'\n *          - Returns undefined otherwise.\n */\nFlash.onError = function(swfID, err) {\n  const tech = Dom.$('#' + swfID).tech;\n\n  // trigger MEDIA_ERR_SRC_NOT_SUPPORTED\n  if (err === 'srcnotfound') {\n    return tech.error(4);\n  }\n\n  // trigger a custom error\n  tech.error('FLASH: ' + err);\n};\n\n/**\n * Get the current version of Flash that is in use on the page.\n *\n * @return {Array}\n *          an array of versions that are available.\n */\nFlash.version = function() {\n  let version = '0,0,0';\n\n  // IE\n  try {\n    version = new global.window.ActiveXObject('ShockwaveFlash.ShockwaveFlash')\n      .GetVariable('$version')\n      .replace(/\\D+/g, ',')\n      .match(/^,?(.+),?$/)[1];\n\n  // other browsers\n  } catch (e) {\n    try {\n      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {\n        version = (navigator.plugins['Shockwave Flash 2.0'] ||\n          navigator.plugins['Shockwave Flash'])\n          .description\n          .replace(/\\D+/g, ',')\n          .match(/^,?(.+),?$/)[1];\n      }\n    } catch (err) {\n      // satisfy linter\n    }\n  }\n  return version.split(',');\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.embed = function(swf, flashVars, params, attributes) {\n  const code = Flash.getEmbedCode(swf, flashVars, params, attributes);\n\n  // Get element by embedding code and retrieving created element\n  const obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];\n\n  return obj;\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.getEmbedCode = function(swf, flashVars, params, attributes) {\n  const objTag = '<object type=\"application/x-shockwave-flash\" ';\n  let flashVarsString = '';\n  let paramsString = '';\n  let attrsString = '';\n\n  // Convert flash vars to string\n  if (flashVars) {\n    Object.getOwnPropertyNames(flashVars).forEach(function(key) {\n      flashVarsString += `${key}=${flashVars[key]}&amp;`;\n    });\n  }\n\n  // Add swf, flashVars, and other default params\n  params = mergeOptions({\n    movie: swf,\n    flashvars: flashVarsString,\n    // Required to talk to swf\n    allowScriptAccess: 'always',\n    // All should be default, but having security issues.\n    allowNetworking: 'all'\n  }, params);\n\n  // Create param tags string\n  Object.getOwnPropertyNames(params).forEach(function(key) {\n    paramsString += `<param name=\"${key}\" value=\"${params[key]}\" />`;\n  });\n\n  attributes = mergeOptions({\n    // Add swf to attributes (need both for IE and Others to work)\n    data: swf,\n\n    // Default to 100% width/height\n    width: '100%',\n    height: '100%'\n\n  }, attributes);\n\n  // Create Attributes string\n  Object.getOwnPropertyNames(attributes).forEach(function(key) {\n    attrsString += `${key}=\"${attributes[key]}\" `;\n  });\n\n  return `${objTag}${attrsString}>${paramsString}</object>`;\n};\n\n// Run Flash through the RTMP decorator\nFlashRtmpDecorator(Flash);\n\nif (Tech.getTech('Flash')) {\n  videojs.log.warn('Not using videojs-flash as it appears to already be registered');\n  videojs.log.warn('videojs-flash should only be used with video.js@6 and above');\n} else {\n  videojs.registerTech('Flash', Flash);\n}\n\nmodule.exports = Flash;\n"]}